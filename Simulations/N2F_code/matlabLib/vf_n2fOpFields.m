% Computes the nf2ff operators for arbitrarily shaped surface
%
% [Opt,Opp] =  vf_n2fOpFields(k0, z0, surfPos, surfN, dS, thetaFF, phiFF)
%
% IN: k0, z0 = free-space wavenumber and impedance
%     surfPos = surface sampling points locations
%     surfN = outwardly directed normal unit vectors to the surface
%     dS = surface patches areas
%     thetaFF, phiFF = look angles for pattern shape
%
% OUT: Opt = near fields to far electric field operator for theta polarized
%            electric field
%      Opp = near fields to far electric field operator for phi polarized
%            electric field
%
% Laurent Ntibarikure
function [Opt,Opp] =  vf_n2fOpFields(k0, z0, surfPos, surfN, dS, ...
  thetaFF, phiFF)

fprintf('#> Computing the n2f Fields operators ... ')
tic();

Opt = zeros(size(thetaFF,1),size(surfPos,2)*6,size(thetaFF,2));
Opp = Opt;
dim = [size(thetaFF,1), size(surfPos,2)*3];

for j=1:size(thetaFF,2)

  RffVx=sin(thetaFF(:,j)).*cos(phiFF(:,j));
  RffVy=sin(thetaFF(:,j)).*sin(phiFF(:,j));
  RffVz=cos(thetaFF(:,j));

  t_x=cos(thetaFF(:,j)).*cos(phiFF(:,j));
  t_y=cos(thetaFF(:,j)).*sin(phiFF(:,j));
  t_z=-sin(thetaFF(:,j));
  p_x=-sin(phiFF(:,j));
  p_y=cos(phiFF(:,j));

  green=-1i*k0/(4*pi).*exp(1i*k0*(RffVx*surfPos(1,:)+...
    RffVy*surfPos(2,:) +RffVz*surfPos(3,:)));

  OptE = [ green.*(-(t_x*surfN(3,:)) .* ((RffVz)*dS) + ...
    (t_x*surfN(2,:)) .* ((-RffVy)*dS) - ...
    (t_y*surfN(3,:)) .* zeros(size(thetaFF,1),size(surfPos,2)) + ...
    (t_y*surfN(2,:)) .* ((RffVx)*dS) - ...
    (t_z*surfN(3,:)) .* ((-RffVx)*dS) + ...
    (t_z*surfN(2,:)) .* zeros(size(thetaFF,1),size(surfPos,2))) ; ...
    green.*(-(t_x*surfN(1,:)) .* ((-RffVy)*dS) + ...
    (t_x*surfN(3,:)).* zeros(size(thetaFF,1),size(surfPos,2)) - ...
    (t_y*surfN(1,:)) .* ((RffVx)*dS) + ...
    (t_y*surfN(3,:)) .* ((-RffVz)*dS) -...
    (t_z*surfN(1,:)).*zeros(size(thetaFF,1),size(surfPos,2)) + ...
    (t_z*surfN(3,:)) .* ((RffVy)*dS)); ... 
    green.*(-(t_x*surfN(2,:)).*zeros(size(thetaFF,1),size(surfPos,2)) + ...
    (t_x*surfN(1,:)) .* ((RffVz)*dS) - ...
    (t_y*surfN(2,:)) .* ((-RffVz)*dS) + ...
    (t_y*surfN(1,:)).*zeros(size(thetaFF,1),size(surfPos,2)) - ...
    (t_z*surfN(2,:)) .* ((RffVy)*dS) + ...
    (t_z*surfN(1,:)) .* ((-RffVx)*dS)) ];

  OptH = [ green .*((t_x*surfN(3,:)).*z0 .* ((-RffVy.*RffVx)*dS) - ...
    (t_x*surfN(2,:)).*z0 .* ((-RffVz.*RffVx)*dS) + ...
    (t_y*surfN(3,:)).*z0 .* ((1-RffVy.*RffVy)*dS) - ...
    (t_y*surfN(2,:)).*z0 .* ((-RffVz.*RffVy)*dS) + ...
    (t_z*surfN(3,:)).*z0 .* ((-RffVy.*RffVz)*dS) - ...
    (t_z*surfN(2,:)).*z0 .* ((1-RffVz.*RffVz)*dS)); ...
     green .*((t_x*surfN(1,:)).*z0 .* ((-RffVz.*RffVx)*dS) - ...
    (t_x*surfN(3,:)).*z0 .* ((1-RffVx.*RffVx)*dS) + ...
    (t_y*surfN(1,:)).*z0 .* ((-RffVz.*RffVy)*dS) - ...
    (t_y*surfN(3,:)).*z0 .* ((-RffVx.*RffVy)*dS) + ...
    (t_z*surfN(1,:)).*z0 .* ((1-RffVz.*RffVz)*dS) - ...
    (t_z*surfN(3,:)).*z0 .* ((-RffVx.*RffVz)*dS)); ...
    green .*((t_x*surfN(2,:)).*z0 .* ((1-RffVx.*RffVx)*dS) - ...
    (t_x*surfN(1,:)).*z0 .* ((-RffVy.*RffVx)*dS) + ...
    (t_y*surfN(2,:)).*z0 .* ((-RffVx.*RffVy)*dS) - ...
    (t_y*surfN(1,:)).*z0 .* ((1-RffVy.*RffVy)*dS) + ...
    (t_z*surfN(2,:)).*z0 .* ((-RffVx.*RffVz)*dS) - ...
    (t_z*surfN(1,:)).*z0 .* ((-RffVy.*RffVz)*dS)) ];

  Opt(:,:,j) = [ vector2matrix(dim, OptH(:)), ...
    vector2matrix(dim, OptE(:)) ];

  clear OptH OptE;

  OppE = [ green.*(-(p_x*surfN(3,:)) .* ((RffVz)*dS) + ...
    (p_x*surfN(2,:)) .* ((-RffVy)*dS) - ...
    (p_y*surfN(3,:)).*zeros(size(thetaFF,1),size(surfPos,2)) + ...
    (p_y*surfN(2,:)) .* ((RffVx)*dS)) ; ...
    green.*(-(p_x*surfN(1,:)) .* ((-RffVy)*dS) + ...
    (p_x*surfN(3,:)).*zeros(size(thetaFF,1),size(surfPos,2)) - ...
    (p_y*surfN(1,:)) .* ((RffVx)*dS) + ...
    (p_y*surfN(3,:)) .* ((-RffVz)*dS)); ...
    green.*(-(p_x*surfN(2,:)).*zeros(size(thetaFF,1),size(surfPos,2)) + ...
    (p_x*surfN(1,:)) .* ((RffVz)*dS) - ...
    (p_y*surfN(2,:)) .* ((-RffVz)*dS) + ...
    (p_y*surfN(1,:)).*zeros(size(thetaFF,1),size(surfPos,2))) ];

  OppH = [ green.*((p_x*surfN(3,:)).*z0 .* ((-RffVy.*RffVx)*dS) - ...
    (p_x*surfN(2,:)).*z0 .* ((-RffVz.*RffVx)*dS) + ...
    (p_y*surfN(3,:)).*z0 .* ((1-RffVy.*RffVy)*dS) - ...
    (p_y*surfN(2,:)).*z0 .* ((-RffVz.*RffVy)*dS)); ...
    green.*((p_x*surfN(1,:)).*z0 .* ((-RffVz.*RffVx)*dS) - ...
    (p_x*surfN(3,:)).*z0 .* ((1-RffVx.*RffVx)*dS) + ...
    (p_y*surfN(1,:)).*z0 .* ((-RffVz.*RffVy)*dS) - ...
    (p_y*surfN(3,:)).*z0 .* ((-RffVx.*RffVy)*dS)) ; ...
    green.*((p_x*surfN(2,:)).*z0 .* ((1-RffVx.*RffVx)*dS) - ...
    (p_x*surfN(1,:)).*z0 .* ((-RffVy.*RffVx)*dS) + ...
    (p_y*surfN(2,:)).*z0 .* ((-RffVx.*RffVy)*dS) - ...
    (p_y*surfN(1,:)).*z0 .* ((1-RffVy.*RffVy)*dS)) ];    

  Opp(:,:,j) = [vector2matrix(dim, OppH(:)),...
    vector2matrix(dim, OppE(:))];

  clear OppH OppE;    
end

fprintf('Elapsed %2.4g s.\n', toc());